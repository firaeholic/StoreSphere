generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        Int      @id @default(autoincrement())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Customer relations
  orders    Order[]
  cart      CartItem[]
  wishlist  WishlistItem[]

  // Vendor relations
  stores    Store[]

  // Property relations
  properties Property[]
  bookings   PropertyBooking[]

  @@map("users")
}

model Store {
  id          Int         @id @default(autoincrement())
  name        String
  slug        String      @unique
  description String?
  logo        String?
  banner      String?
  currency    String      @default("USD")
  status      StoreStatus @default(PENDING)
  
  // Stripe Connect
  stripeAccountId String?
  
  // Owner
  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id])
  
  // Relations
  products Product[]
  orders   Order[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("stores")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String
  description String?
  price       Float
  comparePrice Float?
  images      String // JSON string
  stock       Int      @default(0)
  status      ProductStatus @default(DRAFT)
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Store relation
  storeId Int
  store   Store  @relation(fields: [storeId], references: [id])
  
  // Categories
  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id])
  
  // Variants
  variants ProductVariant[]
  
  // Relations
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  orderItems    OrderItem[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([slug, storeId])
  @@map("products")
}

model ProductVariant {
  id        Int @id @default(autoincrement())
  name      String
  value     String
  price     Float?
  stock     Int    @default(0)
  
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  
  @@map("product_variants")
}

model Category {
  id        Int @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  image       String?
  
  products Product[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Order {
  id            Int         @id @default(autoincrement())
  orderNumber   String      @unique
  status        OrderStatus @default(PENDING)
  total         Float
  currency      String      @default("USD")
  
  // Payment
  stripePaymentIntentId String?
  paymentStatus         PaymentStatus @default(PENDING)
  
  // Customer
  customerId Int
  customer   User   @relation(fields: [customerId], references: [id])
  
  // Store
  storeId Int
  store   Store  @relation(fields: [storeId], references: [id])
  
  // Shipping
  shippingAddress Json
  billingAddress  Json?
  
  // Items
  items OrderItem[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model OrderItem {
  id       Int @id @default(autoincrement())
  quantity Int
  price    Float
  
  orderId Int
  order   Order  @relation(fields: [orderId], references: [id])
  
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

model CartItem {
  id            Int         @id @default(autoincrement())
  quantity Int    @default(1)
  
  userId Int
  user   User   @relation(fields: [userId], references: [id])
  
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@map("cart_items")
}

model WishlistItem {
  id Int @id @default(autoincrement())
  
  userId Int
  user   User   @relation(fields: [userId], references: [id])
  
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@map("wishlist_items")
}

enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
}

enum StoreStatus {
  PENDING
  ACTIVE
  SUSPENDED
  BANNED
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model Property {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  location    String
  price       Float
  images      String // JSON string
  amenities   String // JSON string
  bedrooms    Int
  bathrooms   Int
  maxGuests   Int
  rating      Float    @default(0)
  status      PropertyStatus @default(ACTIVE)
  
  // Owner
  ownerId Int
  owner   User   @relation(fields: [ownerId], references: [id])
  
  // Bookings
  bookings PropertyBooking[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("properties")
}

model PropertyBooking {
  id          Int      @id @default(autoincrement())
  checkIn     DateTime
  checkOut    DateTime
  guests      Int
  totalPrice  Float
  status      BookingStatus @default(PENDING)
  
  // Guest
  guestId Int
  guest   User   @relation(fields: [guestId], references: [id])
  
  // Property
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id])
  
  // Payment
  stripePaymentIntentId String?
  paymentStatus         PaymentStatus @default(PENDING)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("property_bookings")
}

enum PropertyStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
